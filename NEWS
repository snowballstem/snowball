up to: 86d7b2b5233653141de37761e943d04119bcabbb

Snowball 2.3.0 (2025-0?-??)
===========================

Ada
---

* Bug fixes:

  + Fix code generated for Snowball `loop` which previously was partly Pascal
    rather than Ada (it looks like the Ada generator was originally based on
    the Pascal one).  None of the stemmers shipped in previous releases
    exercised this case, but the Turkish stemmer now does.

  + The Ada runtime was not tracking the current length of the string
    but instead used the current limit value or some other substitute, which
    manifested as various incorrect behaviours for code inside of setlimit.

  + `size` incorrectly returns the difference between the limit and the
    backwards limit.

  + `lenof` or `sizeof` on a string variable generated Ada code that
    didn't even compile.

  + Fix incorrect preconditions on some methods in the runtime.

  + Fix bug in Replace () helper function
    The use of `Context.Lb` should be `Context.L`.
    Bug triggered by code in the Kraaij-Pohlmann implementation (which is
    now dutch.sbl).

  + Fix code generated for `insert`, `<-` or `=`, when followed by a string
    variable.  This was failing to compile with e.g.:
        stemmer-dutch.adb:421:34: error: "S_Ch" is undefined
    We were missing a qualifying `Z.` and also the variable needs converting
    with `Ada.Strings.Unbounded.To_String()`.  Triggered by code in the Dutch
    Kraaij-Pohlmann implementation (which was not previously enabled by
    default).

  + Generate valid code when `among` is not used by a program.  We were
    generating an incomplete member declaration in this case:

      Among_String : constant String :=

  + If the end of a routine was unreachable code the Snowball compiler
    would think the start of the next routine was also unreachable and would
    not generate it.  This didn't affect code generation for any algorithms we
    currently ship.

* Code quality:

  + Only declare variables A and C when each are needed.

  + Fix indentation of generated declarations.

  + Drop extra blank line before `Result := True`.

C/C++
-----

* Bug fixes:

  + Fix potential NULL dereference in runtime code if we failed to allocate
    memory for the p or S member for a Snowball program which uses one or more
    string variables.  Problem was introduced in Snowball 2.0.0.  Fixes #206,
    reported by Maxim Korotkov.

  + Eliminate assumptions that NULL has all-zero bit pattern.  We don't know
    of any current platforms where this assumption fails, but the C standard
    doesn't require an all-zero bit pattern for NULL.  Fixes #207.

* Optimisations:

  + Store index delta for among substring_i field.  This makes trying
    substrings after a failed match slightly faster because we can just add
    the offset to the pointer we already have to the current element.

* Code quality:

  + Improve formatting of generated code.

C#
--

* Bug fixes:

  + Add missing runtime support for testing for a string var at the current
    position was only implemented for backwardmode.  The forwards case isn't
    exercised by any of the stemming algorithms we currently ship.

    [C#] Make csharp_stemwords -i option optional
    csharp_stemwords will now read from stdin if -i is not specified,
    like the C version does.
    The code also no longer sucks the whole input into an array in memory,
    instead reading a word and then stemming it right away.  This is more
    helpful for interactive testing, and also a little faster.

    [C#] csharp_stemwords: Use `else if` consistently

    [C#] Prune unused `using System.Text;`

    [C#] Fix csharp_stemwords to handle `dutch_porter`
    The code was removing any `_` from the stemmer name before comparing
    to the class name, but the class name includes any `_` so we should
    not do that.

    [C#] Workaround mcs code flow analysis bug
    Put a block around each `case` in the code generated for an
    `among` which seems to workaround bogus compiler errors (typically with
    repeat reports at the same location):
    dutchStemmer.generated.cs(543,25): error CS0165: Use of unassigned local variable `c5'
    The c5 variable is initialised at point of declaration and we
    don't `goto` into the block it is declared in from outside so
    this seems to be buggy code flow analysis in the compiler.
    Unclear where to usefully report mono bugs in 2025 so I've
    not tried.

Go
--

* Optimisations:

  + Drop some unneeded Go code generated for string `$`.  None of the shipped
    stemmers use string `$`, though the Schinke Latin stemmer algorithm on the
    website does.

* Code quality:

  + Dispatch among result with `switch` instead of an `if` ... `else if` chain
    (which looks like we did because the Go generator evolved from the Python
    generator and Python didn't used to have a switch-like construct.  This
    doesn't make a measurable speed difference so it seems the Go compiler is
    optimising both to equivalent code, but using a switch here seems clearer,
    a better match for the intent, and is a bit simpler to generate.

Java
----

* The Java code generated by Snowball requires now requires Java >= 7.  Java 7
  was released in 2011, and Java 6's EOL was 2013 so we don't expect this
  to be a problematic requirement.  See #195.

* Optimisations:

  + We now store the current string in a `char[]` rather than using a
    `StringBuilder` to reduce overheads.  The `getCurrent()` method continues
    to return a Java `String`, but the `char[]` can be accessed using the new
    `getCurrentBuffer()` and `getCurrentBufferLength()` methods.  Patch from
    Robert Muir (#195).

  + Use a more efficient mechanism for calling `among` functions.  Patch from
    Robert Muir (#195).

* Code quality:

  + Consistently put `[]` right after element type for array types, which seems
    the most used style.

  + Fix javac warnings in SnowballProgram.java.

  + Improve formatting of generated code.

Javascript
----------

* Bug fixes:

  + Use base class specified by `-p` in string `$` rather than hard-coding
    `BaseStemmer` (which is the default if you don't specify `-p`).  None of
    the shipped stemmers use string `$`, though the Schinke Latin stemmer
    algorithm on the website does.

* Code quality:

  + Modernise the generated code a bit.  Loosely based on changes proposed in
    #123 by Emily Marigold Klassen.

* Other changes:

  + Add start of ESM support.  See #183, reported by Lionel Rowe.

Pascal
------

* Bug fixes:

  + Add missing semicolons to code generated in some cases for a function which
    always succeeds or always fails.  The new dutch.sbl was triggering this
    bug.

  + If the end of a routine was unreachable code the Snowball compiler
    would think the start of the next routine was also unreachable and would
    not generate it.  This didn't affect code generation for any algorithms we
    currently ship.

* Code quality:

  + Eliminate commented out code generated for string `$`.  None of the shipped
    stemmers use string `$`, though the Schinke Latin stemmer algorithm on the
    website does.

* Other changes:

  + Enable warnings, etc from fpc.

  + Select GNU-style diagnostic format.

Python
------

* Optimisations:

  + No longer store Among routine name as string
    If we define amongs after routines in the generated Python classes
    then we can directly reference routines used in amongs by name
    and avoiding a getattr() call each time an among wants to call a
    routine.
    This doesn't seem to make a measurable speed difference, but it's
    cleaner and avoids problems with name mangling.
    Suggested by David Corbett in #217.

* Bug fixes:

  + Correctly handle stemmer names with an underscore (not currently exercised
    by any stemmers we ship).

* Other changes:

  + Set python_requires to indicate to install tools that the generated code
    won't work with Python 3.0.x, 3.1.x and 3.2.x (due to use of `u"foo"`
    string literals).  Closes #192 and #191, opened by Andreas Maier.

  + Add classifiers to indicate support for Python 3.3 and for 3.8 to 3.13.
    Fixes #158, reported by Dmitry Shachnev.

Author: Dmitry Shachnev <mitya57@gmail.com>
    python: Stop marking the wheel as universal
    Quoting the warning message:
    > With Python 2.7 end-of-life, support for building universal wheels
    > (i.e., wheels that support both Python 2 and Python 3)
    > is being obviated.
    > Please discontinue using this option, or if you still need it,
    > file an issue with pypa/setuptools describing your use case.
    >
    > By 2025-Aug-30, you need to update your project and remove deprecated calls
    > or your builds will no longer be supported.

Author: Dmitry Shachnev <mitya57@gmail.com>
    GNUmakefile: Use ‘build’ module instead of calling setup.py directly
    Calling setup.py directly is deprecated and produces a warning. See:
    - https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html
    - https://packaging.python.org/en/latest/discussions/setup-py-deprecated/#what-commands-should-be-used-instead

Rust
----

* Optimisations:

  + Skip unnecessary calls to find_among (#202)
    This change ports an optimization from the C stemmer generator to the rust
    generator.
    In order to determine whether find_among and find_among_b are worth calling,
    the generated C checks that the current string is long enough to potentially match
    the shortest string literal in the among,
    then does some bitwise magic to check that the characters in the current string
    at length of the end of the shortest string in the among
    are the same as the character at that position in at least one of the among strings.
    If the current string is too short or that character doesn't match any of the amongs
    at that position, then we can fail-fast instead of calling find_among.
    This change allows the generated rust stemmers to similarly skip find_among calls
    where we can quickly determine that find_among would not succeed.
    In some stemming benchmarks I've been running, this improves the performance
    of the rust english stemmer by about 27%.
    Patch from jedav.

* Code quality:

  + Suppress unused_parens warning, for example triggered by the code generated
    for `$x = x*x` (where `x` is an integer).

  + Dispatch `among` result with `match` instead of an `if` ... `else if` chain
    (which looks like we did because the Rust generator evolved from the Python
    generator and Python didn't used to have a switch-like construct.  This
    results in a 3% speed-up for an unoptimised Rust compile but doesn't seem
    to make a measurable difference when optimising so it seems the Rust
    compiler is optimising both to equivalent code.  However using a `match`
    here seems clearer, a better match for the intent, and is a bit simpler to
    generate.

New stemming algorithms
-----------------------

* Add Esperanto stemmer from David Corbett (#).

* Add Estonian algorithm from Linda Freienthal (#108).

Behavioural changes to existing algorithms
------------------------------------------

* Dutch: Switch to Kraaij-Pohlmann as the default for Dutch
    .
    Fixes #1

* Dutch (Kraaij-Pohlmann):
    The Snowball implementation now produces the same stems for all words in
    our sample vocabulary list.
    See #1

* Dutch (porter): Fix UTF-8 R1 handling
    The "at least 3 characters" part of the R1 definition was actually
    implemented such that when working in UTF-8 it was "at least 3 bytes".
    We set R1 having stripped most accents found in Dutch, but we leave `è`
    alone.  I've not managed to find a Dutch word starting `è` which was
    stemmed differently depending on encoding, but proper nouns and other
    words of foreign origin may contain other accented characters and it
    seems better for the stemmer to handle such words the same way
    regardless of the encoding in use.

* English: Add extra condition to undoubling.  We no longer undouble if the
  double consonant is preceded by exactly "a", "e" or "o" to avoid conflating
  "add"/"ad", "egg"/"eg", "off"/"of", etc.  Fixes #182, reported by Ed Page

* English: Add 'evening' to exception2
    Reported by Ann B on snowball-discuss back in 2017:
    https://lists.tartarus.org/pipermail/snowball-discuss/2017-June/001620.html

* French: Remove elisions as first step.  See #187.

* German: Replace with the "german2" variant.  This normalises umlauts to an
  "e" suffix and "ß" with "ss", which is presumably much less common in
  newly created text than it once was as modern computer systems generally
  don't have the limitations which motivated this, but there will still be
  large amounts of legacy text which it seems helpful for the stemmer to
  handle without having to know to select a variant.

  On our sample German vocabulary which contains 35033 words, 77 words give
  different stems.  A significant proportion of these are foreign words, and
  some are proper nouns.  Some cases definitely seem improved, and quite a few
  are just different but effectively just change the stem for a word or group
  of words to a stem that isn't otherwise generated.  There don't seem any
  changes that are clearly worse, though there are some changes that have both
  good and bad aspects to them.

  Fixes #92

* German: Don't remove -em if preceded by -syst.  Previously we would overstem
  words ending -system.  This change means we now conflate e.g. "system" and
  "systemen".  See #161.

* German: Remove -erin and -erinnen suffixes which conflates singular and
  plural female versions of nouns with the male versions.
  Fixes #85
    Partly addresses #161

* German: Replace -ln and -lns with -l.  This improves 82 cases in the current
  sample data without making anything worse.  Tests on a larger word list look
  good too.  Partly addresses #161

* German: Remove -et if preceded by t.  Fixes #200, reported by Robert Frunzke.

* Greek: Fix "faulty slice operation" for input ισαισα
    The fix changes ισα to stem to ισ instead of the empty string, which
    seems better (and to be what the second paper actually says to do if
    read carefully).
    Fixes #204

* Italian: Address overstemming of "divano" (sofa) which previously stemmed to
  "div", which is the stem for 'diva' (diva).  Now it is stemmed to 'divan',
  which is what its plural form 'divani' already stemmed to.  Fixes #49,
  reported by francesco.

* Norwegian: Improve stemming of -ers words.  Fixes #175, reported by Karianne
  Berg.

* Norwegian: Include more accented vowels

    Including "ê", "ò", "ó" and "ô" improves the stemming of a fairly small
    number of words, but there's basically no cost to having extra vowels in
    the grouping, and a few of these words are commonly used.

    We deliberately haven't included some other accented vowels which are
    used in some Norwegian words:

    Including "é" would conflate forms of "léta" (to paint) but "lét" is
    both the imperative of "léta" and the past tense of "la" (to let/allow)
    so overall this conflation doesn't seem an improvement.  It doesn't
    seem to make a difference to the stemming of any other Norwegian words.

    Norwegian doesn't seem to use "è" in the first vowel cluster of any
    words, so including it makes not difference to the stemming of Norwegian
    words.

    Fixes #218, reported by András Jankovics.
* Romanian: Fix to work with unicode alphabet in modern use
    Currently the stemmer does not work with s-comma and t-comma characters,
    but only with their cedilla "approximations" from before Romanian had
    full Unicode support.
    The old cedilla "approximations" are normalized to the proper unicode
    characters by the stemmer.   Patch from Rober Muir.

* Swedish: Replace suffix "öst" with "ös" when preceded by any of 'iklnprtuv'
  rather than just 'l'.  The new rule only requires the "öst" to be in R1
  whereas previously we required all of "löst" to be.  This second tweak
  doesn't seem to affect any words ending "löst" but it conflates a few extra
  cases when combined with the expanded list of preceding letters, and seems
  more logical linguistically (since "ös" is akin to "ous" in English).  Fixes
  #152, reported by znakeeye.

* Swedish: Remove -et/-ets in cases where it helps.
    Removing -et can't be done unconditionally because many words end in -et
    where this isn't a suffix.  However it's a very common suffix so it seems
    worth crafting a more complex condition under which to remove.
    Fixes #47

* Turkish: Remove proper noun suffixes
    In modern Turkish orthography, an apostrophe is used to separate proper
    names from any suffixes, so before we do anything else we now truncate
    at the first apostrophe.
    Fixes #188

* Yiddish: Avoid generating empty stem for input "גע" (not a valid word, but 
  it's better to avoid an empty stem for any non-empty input).

Optimisations to existing algorithms
------------------------------------

* General change:
    Use gopast everywhere to establish R1 and R2

    Previously some algorithms used:

      goto v  gopast non-v

    while some used:

      gopast v  gopast non-v

    The two are equivalent but the latter is a little more efficient as we
    avoid checking if the final v is a non-v (which is obviously won't be),
    so always use the latter.

    In a similar vein, change Yiddish from:

      goto vowel repeat vowel

    to:

      gopast vowel  goto non-vowel

* Dutch (porter): Optimise prelude routine.

* English: Remove unnecessary exception for `skis`.
    The algorithm stems `skis` to `ski` by itself (`skies` and `sky` do
    still need a special case to avoid conflation with `ski` though).

* Hungarian: Simplify R1 definition

    We were taking digraphs into account when determining where R1 starts,
    to ensure it didn't start in the middle of a digraph (except that "dz"
    was missing from the Snowball implementation although included in the
    algorithm description).

    However having R1 start in the middle of a digraph would only make a
    difference to the stemming if we removed a suffix that started with
    the last character of the digraph (or with "zs" in the case of "dzs").

    No suffixes we remove start with "y" or "z".

    Two suffixes start with "s" ("stul" and "stül") so removing 'cs' and
    'dzs' makes a difference to some inputs (e.g. "acstult" and "adzstult"),
    but not any inputs which are valid Hungarian words.

    Removing the digraph handling speeds up stemming (by ~2% on the current
    sample vocabulary list).

    See #216.  Thanks to András Jankovics for confirming no Hungarian words
    are affected by this change.

* Lithuanian: Remove redundant R1 check.

* Tamil: Optimise by using `among` instead of long `or` chains.  The generated
  C version now takes 43% less time to processes the test vocabulary.

* Tamil: Remove many cases which can't be triggered due to being handled by
  another case.

* Tamil: `test` clean ups.

* Tamil: Make fix_va_start simpler and faster.

* Tamil: Eliminate pointless flag changes.

* Turkish: Minor optimisations.

Code clarity improvements to existing algorithms
------------------------------------------------

* Lithuanian: Use recommended latin stringdef codes
    Using common codes makes it easier to work across algorithms, but
    they are more mnemonic so also seem clearer when just considering this
    one algorithm.

* Serbian: Use recommended latin stringdef codes
    Using common codes makes it easier to work across algorithms, but
    they are more mnemonic so also seem clearer when just considering this
    one algorithm.

* Turkish: Adjust stringdefs to match other uses
    Use {sc} for s-cedilla and {i} for dotless-i.

Compiler
--------

* Generic code generation improvements:

  + Add generic dead code elimination machinery.  This facilitates various new
    optimisations, so far the following have been implemented:

    - Tail-calling
    - Simpler code for calling routines which always give the same signal
    - Simpler code when a routine ends in a integer test (this also allows
      eliminating an Ada-specific codegen optimisation which did something
      similar but only for routines which consist *entirely* of a single
      integer test.
    - Dead code reporting and removal (only in simple cases currently)

    Currently this overlaps in functionality with the existing reachability
    tracking which is implemented on a per-language basis, and only for some
    languages.  This reachability tracking was originally added for Java
    where some unreachable code is invalid and result in a compile time error,
    but then seems to have been copied for some other newer languages which
    may or may not actually need it.  The approach it uses unfortunately
    relies on correctly updating the reachability flag anywhere in the
    generator code where reachability can change which has proved to be a
    source of bugs, some unfixed.  This new approach seems better and with some
    more work should allow us to eliminate the older code.  Fixes #83.

  + Omit check for `among` failing in generated code when we can tell at compile
    time that it can't fail.

  + Optimise `goto`/`gopast` applied to a grouping or inverted grouping (which
    is by far the most common way to use `goto`/`gopast`) for all target
    languages (new for Go, Java, Javascript, Pascal and Rust).

  + We never need to restore the cursor after `not`
    If `not` turns signal `f` into `t` then it sets `c` back to its old
    position; otherwise, `not` signals `f` and `c` will get reset by
    whatever ultimately handles this `f` (or the program exits and the
    position of `c` no longer matters).
    This slightly improves the generated code for the `english` and `porter`
    stemmers.

  + Don't generate code for undefined or unused routines.

  + Avoid generating variable names and then not actually using them.
    This avoids mysterious gaps in the numbering of variables in the generated
    code.

  + Eliminate `!`/`not` from integer test code by generating the inverse
    comparison operator instead for all languages, e.g. for Python we now
    generate

    if self.I_p1 >= self.I_x:

    instead of

    if not self.I_p1 < self.I_x:

    This isn't going to be faster in compiled languages with an optimiser but
    for scripting languages it may be faster, and even if not, it makes for a
    little less work when loading the script.

  + Canonicalise `hop 1` to `next`.  The generated code for `next` can be
    slightly more efficient.  This will also apply to `hop` followed by a
    constant expression which Snowball can reduce to `1`.

  + Avoid trailing whitespace in generated files.

  + Fix problems with --comments option
    When generating C code we would segfault for code containing `atleast`,
    `hop` or integer tests.
    Fixed missing comments for some commands in some target languages.
    Formatting of comments was inconsistent in some target languages
    (in a few cases resulting in poor source code formatting even without
    --comments).
    Comments in C are now always on their own line - previously some
    were after at the end of the line and some on their own line which
    made them harder to follow.
    Emit comments before among and routine/external defs

    Improve --help output

  + Division by zero during constant folding now gives an error.

  + Simplify more numeric expressions
    We now simplify identity operations such as x + 0 to x, and
    operations which are equivalent to negation such as 0 - x,
    -1 * x, x / -1 to -x.
    It's unlikely such expressions would be written literally,
    but they may be created by constant folding - e.g.
    x * sizeof 'a' -> x * 1 -> x.

  + For `hop` followed by an unexpected token (e.g. `hop hop`) we were
    already emitting a suitable error but would then segfault because AE on
    the node for the hop is NULL.

  + Emit error for redefinition of grouping.

  + Fix NULL pointer dereference on invalid code such as `$x = $y`.

    Make compiler fail cleanly if malloc fails
    We now report the failure and exit.  Previously the NULL return from
    malloc wasn't checked for so we'd typically segfault.

    lenof and sizeof now mark their arguments as used
    This avoids a bogus error followed by a confusing additional
    message if this is the only use of the value of the string variable
    they're applied to:
    lenofsizeofbug.sbl:3: warning: string 's' is set but never used
    Unhandled type of dead assignment via sizeof
    I stumbled on this while creating an artificial testcase - it seems
    an unlikely situation to encounter in real code as you'd probably
    use `hop` or subtract values of cursor or from `setmark` rather
    than copying the value into a string variable just to find its
    length.

    Fix line number for "string not terminated" error
    The reported line number was one too high in the case where we
    were in a stringdef (but correct if we weren't).

    Eliminate special handling for among starter
    We now convert the starter to be a command before the among, adding
    an explict substring if there isn't one.  So:
    substring C among ((X) ...)
    now generates the exact same parse tree as:
    substring C X among (...)
    and:
    among ((X) ...)
    as:
    substring X among (...)

    Warn about suspicious situations where a command always signals f or always
    signals t.

    Warn about repeat/atleast body with known signal
    If the body of repeat/atleast always signals `t` then it will loop
    forever, which is not desirable behaviour for a stemming algorithm.
    If the body of repeat/atleast always signals `f` then it will never
    loop, which seems clearly not what was intended.

Author: jsteemann <jsteemann@users.noreply.github.com>
    fix a memleak in snowball compiler
    When an output file is used and the name option is not, then the
    compiler will dynamically allocate value for the `name` option and never
    free it.
    This is not a large problem, because at the end of the compile process
    the OS will free all allocated memory anyway.
    However, when using snowball as part of a larger toolchain and then
    using compile options such as `-fsanitize=leak`, a memleak in snowball
    can break the entire build.
    This exactly what happened to us. We could work around this somehow, but
    it seems better to fix the leak in the compiler properly.
    #136 and #166
    LSAN_OPTIONS=leak_check_at_exit=0

    Store textual data more efficiently in compiler
    Previously the snowball compiler stored almost all textual data using
    the symbol type, which is a typedef for unsigned short.  This was
    done even though most such data only used 8 bit character values - it
    just ended up spaced out to twice the size (assuming 2 byte short)
    with a zero byte between every actual character value byte.
    The space and time overheads this incurred weren't really an issue as
    snowball programs are small, but this also complicated code that handled
    such data as it often needed to work character by character rather than
    treating the data as a block.
    Now we only use symbol for literal strings, as they may need to be
    stored as wide character Unicode (ENC_WIDECHARS).  If ENC_SINGLEBYTE or
    ENC_UTF8 are in use then literal string data is still stored using
    symbol.

    Fix clang -Wunused-but-set-variable warning in compiler code.

    Fix a few -Wshadow warnings in compiler and enable.

    Tighten parsing of writef format strings
    Error out on unrecognised escape codes or if a numbered escape
    is used with too high a number or a non-digit.
    This change reveals that the Go and Rust generators were using invalid
    escape ~A - the old writef() code was substituting this with just A
    which is what is wanted so this case was harmless but being lenient
    hear could hide bugs, especially when copying code between generators
    as they don't all support the same set of format codes.

Build system
------------

    Turn on Java warnings and make them errors

    Compile with -g by default
    This makes debugging easier, and matches the default for at least
    some other build systems (e.g. autotools).

    [ada] Fix "make clean" to remove all built files

Author: Stefano Rivera <stefano@rivera.za.net>
    Make file: Clean stemtest too

    Add missing COMMON_FILES dep to dist targets

    GNUmakefile: Tidy up and make more consistent

    GNUmakefile: Make use of $*
    This avoids needing to echo $< into sed to extract the same string,
    which was slower and less readable, and allows other simplifications.

    Use $(patsubst ...) instead of sed in .java.class rule.
    This gives cleaner make output and is a bit more efficient.

libstemmer
----------

Testsuite
---------

    Give a clear error if snowball-data isn't found
    Fixes #196, reported by Andrea Maccis.

    Handle not thinning testdata better
    If THIN_FACTOR is set to 1 we no longer run gzipped test data
    through awk.  We also no handle THIN_FACTOR being set empty as
    equivalent to 1 for convenience.

    Fix Java TestApp to allow a single argument
    The documented command line syntax is that you only need to specify
    the language and there was already code to read from stdin if no
    input file was specified, but at least two command line options
    were required.

    Fix deprecation warning in TestApp.java

    Optimise TestApp.java by creating fewer objects.  Patch from Robert Muir.

    stemwords.py: Try to open input before output
    Previously we would create an empty output file if the input was
    not found, not readable, etc.

    stemwords.py: Use argv.pop(0) to unshift elements
    Removing and retrieving in one function is cleaner, and avoids bugs
    (such as us not actually removing the argument for -c, though we
    also currently ignore options we don't understand so this the
    processing of -c's argument as an option would typically not cause
    a problem).

    Improve stemwords error message to say "Out of memory or internal error"
    rather than just "Out of memory".

Documentation
-------------

    Include "what is stemming" section in each README

    Include section on threads in each README.  Based on patch for Python from dbcerigo.

    Document input should be lowercase with composed accents
    See #186

    CONTRIBUTING.rst: Clarify which charsets to list
    CONTRIBUTING.rst: Go into more detail

    Add README section on building
    Includes notes on cross-compiling.
    Closes #205

    CONTRIBUTING.rst: Add general advice section
    In particular, note to use spaces-only for indentation in most
    cases.  Thanks to Dmitry Shachnev for raising this point.

    CONTRIBUTING.rst: Note that UTF-8 is OK in comments
    Thanks to Dmitry Shachnev for asking.

Fix some typos.
Author: Josh Soref <jsoref@users.noreply.github.com>

Document that our CI now uses github actions.

    Update link to Greek stemmer PDF
    Updated URL found by Michael Bissett, ref
    https://github.com/snowballstem/snowball-website/pull/33

Snowball 2.2.0 (2021-11-10)
===========================

New Code Generators
-------------------

* Add Ada generator from Stephane Carrez (#135).

Javascript
----------

* Fix generated code to use integer division rather than floating point
  division.

  Noted by David Corbett.

Pascal
------

* Fix code generated for division.  Previously real division was used and the
  generated code would fail to compile with an "Incompatible types" error.

  Noted by David Corbett.

* Fix code generated for Snowball's `minint` and `maxint` constant.

Python
------

* Python 2 is no longer actively supported, as proposed on the mailing list:
  https://lists.tartarus.org/pipermail/snowball-discuss/2021-August/001721.html

* Fix code generated for division.  Previously the Python code we generated
  used integer division but rounded negative fractions towards negative
  infinity rather than zero under Python 2, and under Python 3 used floating
  point division.

  Noted by David Corbett.

Code Quality Improvements
-------------------------

* C#: An `among` without functions is now generated as `static` and groupings
  are now generated as constant.  Patches from James Turner in #146 and #147.

Code generation improvements
----------------------------

* General:

  + Constant numeric subexpressions and constant numeric tests are now
    evaluated at Snowball compile time.

Behavioural changes to existing algorithms
------------------------------------------

* german2: Fix handling of `qu` to match algorithm description.  Previously
  the implementation erroneously did `skip 2` after `qu`.  We suspect this was
  intended to skip the `qu` but that's already been done by the substring/among
  matching, so it actually skips an extra two characters.

  The implementation has always differed in this way, but there's no good
  reason to skip two extra characters here so overall it seems best to change
  the code to match the description.  This change only affects the stemming of
  a single word in the sample vocabulary - `quae` which seems to actually be
  Latin rather than German.

Optimisations to existing algorithms
------------------------------------

* arabic: Handle exception cases in the among they're exceptions to.

* greek: Remove unused slice setting, handle exception cases in the among
  they're exceptions to, and turn `substring ... among ...  or substring ...
  among ...` into a single `substring ... among ...` in cases where it is
  trivial to do so.

* hindi: Eliminate the need for variable `p`.

* irish: Minor optimisation in setting `pV` and `p1`.

* yiddish: Make use of `among` more.

Compiler
--------

* Fix handling of `len` and `lenof` being declared as names.

  For compatibility with programs written for older Snowball versions
  len and lenof stop being tokens if declared as names.  However this
  code didn't work correctly if the tokeniser's name buffer needed to
  be enlarged to hold the token name (i.e. 3 or 5 elements respectively).

* Report a clearer error if `=` is used instead of `==` in an integer test.

* Replace a single entry command list with its contents in the internal syntax
  tree.  This puts things in a more canonical form, which helps subsequent
  optimisations.

Build system
------------

* Support building on Microsoft Windows (using mingw+msys or a similar
  Unix-like environment).  Patch from Jannick in #129.

* Split out INCLUDES from CPPFLAGS so that CPPFLAGS can now be overridden by
  the user if required.  Fixes #148, reported by Dominique Leuenberger.

* Regenerate algorithms.mk only when needed rather than on every `make` run.

libstemmer
----------

* The libstemmer static library now has a `.a` extension, rather than `.o`.
  Patch from Michal Vasilek in #150.

Testsuite
---------

* stemtest: Test that numbers and numeric codes aren't damaged by any of the
  algorithms.  Regression test for #66.  Fixes #81.

* ada: Fix ada tests to fail if output differs.  There was an extra `| head
  -300` compared to other languages, which meant that the exit code of `diff`
  was ignored.  It seems more helpful (and is more consistent) not to limit how
  many differences are shown so just drop this addition.

* go: Stop thinning testdata.  It looks like we only are because the test
  harness code was based on that for rust, which was based on that for
  javascript, which was only thinning because it was reading everything into
  memory and the larger vocabulary lists were resulting in out of memory
  issues.

* javascript: Speed up stemwords.js.  Process input line-by-line rather than
  reading the whole file into memory, splitting, iterating, and creating an
  array with all the output, joining and writing out a single huge string.
  This also means we can stop thinning the test data for javascript, which we
  were only doing because the huge arabic test data file was causing out of
  memory errors.  Also drop the -p option, which isn't useful here and
  complicates the code.

* rust: Turn on optimisation in the makefile rather than the CI config.  This
  makes the tests run in about 1/5 of the time and there's really no reason to
  be thinning the testdata for rust.

Documentation
-------------

* CONTRIBUTING.rst: Improve documentation for adding a new stemming algorithm.

* Improve wording of Python docs.

Snowball 2.1.0 (2021-01-21)
===========================

C/C++
-----

* Fix decoding of 4-byte UTF-8 sequences in `grouping` checks.  This bug
  affected Unicode codepoints U+40000 to U+7FFFF and U+C0000 to U+FFFFF and
  doesn't affect any of the stemming algorithms we currently ship (#138,
  reported by Stephane Carrez).

Python
------

* Fix snowballstemmer.algorithms() method (#132, reported by kkaiser).

* Update code to generate trove language classifiers for PyPI.  All the
  natural languages we previously had stemmers for have now been added to
  PyPI's list, but Armenian and Yiddish aren't on it.  Patch from Dmitry
  Shachnev.

Code Quality Improvements
-------------------------

* Suppress GCC warning in compiler code.

* Use `const` pointers more in C runtime.

* Only use spaces for indentation in javascript code.  Change proposed by Emily
  Marigold Klassen in #123, and seems to be the modern Javascript norm.

New Snowball Language Features
------------------------------

* `lenof` and `sizeof` can now be applied to a literal string, which can be
  useful if you want to do calculations on cursor values.

  This change actually simplifies the language a little, since you can now use
  a literal string in any read-only context which accepts a string variable.

Code generation improvements
----------------------------

* General:

  + Fix bugs in the code generated to handle failure of `goto`, `gopast` or
    `try` inside `setlimit` or string-`$`.  This affected all languages (though
    the issue with `try` wasn't present for C).  These bugs don't affect any of
    the stemming algorithms we currently ship.  Reported by Stefan Petkovic on
    snowball-discuss.

  + Change `hop` with a negative argument to work as documented.  The manual
    says a negative argument to hop will raise signal f, but the implementation
    for all languages was actually to move the cursor in the opposite direction
    to `hop` with a positive argument.  The implemented behaviour is
    problematic as it allows invalidating implicitly saved cursor values by
    modifying the string outside the current region, so we've decided it's best
    to fix the implementation to match the documentation.

    The only Snowball code we're aware of which relies on this was the original
    version of the new Yiddish stemming algorithm, which has been updated not
    to rely on this.

    The compiler now issues a warning for `hop` with a constant negative
    argument (internally now converted to `false`), and for `hop` with a
    constant zero argument (internally now converted to `true`).

  + Canonicalise `among` actions equivalent to `()` such as `(true)` which
    previously resulted in an extra case in the among, and for Python
    we'd generate invalid Python code (`if` or `elif` with an empty body).
    Bug revealed by Assaf Urieli's Yiddish stemmer in #137.

  + Eliminate variables whose values are never used - they no longer have
    corresponding member variables, etc, and no code is generated for any
    assignments to them.

  + Don't generate anything for an unused `grouping`.

  + Stop warning "grouping X defined but not used" for a `grouping` which is
    only used to define another `grouping`.

* C/C++:

  + Store booleans in same array as integers.  This means each boolean is
    stored as an int instead of an unsigned char which means 4 bytes instead of
    1, but we save a pointer (4 or 8 bytes) in struct SN_env which is a win for
    all the current stemmers.  For an algorithm which uses both integers and
    booleans, we also save the overhead of allocating a block on the heap, and
    potentially improve data locality.

  + Eliminate duplicate generated C comment for sliceto.

* Pascal:

  + Avoid generating unused variables.  The Pascal code generated for the
    stemmers we ship is now warning free (tested with fpc 3.2.0).

  + Don't emit empty `private` sections.  Cosmetic, but makes the generated
    code a bit easier to follow.

* Python:

  + End `if`-chain with `else` where possible, avoiding a redundant test
    of the variable being switched on.  This optimisation kicks in for an
    `among` where all cases have commands.  This change seems to speed up `make
    check_python_arabic` by a few percent.

New stemming algorithms
-----------------------

* Add Serbian stemmer from stef4np (#113).

* Add Yiddish stemmer from Assaf Urieli (#137).

* Add Armenian stemmer from Astghik Mkrtchyan.  It's been on the website for
  over a decade, and included in Xapian for over 9 years without any negative
  feedback.

Optimisations to existing algorithms
------------------------------------

* kraaij_pohlmann: Use `$v = limit` instead of `do (tolimit setmark v)` since
  this generates simpler code, and also matches the code other algorithm
  implementations use.

  Probably for languages like C with optimising compilers the compiler
  will generate equivalent code anyway, but e.g. for Python this should be
  an improvement.

Code clarity improvements to existing algorithms
------------------------------------------------

* hindi.sbl: Fix comment typo.

Compiler
--------

* Don't count `$x = x + 1` as initialising or using `x`, so it's now handled
  like `$x += 1` already is.

* Comments are now only included in the generated code if command line option
  -comments is specified.

  The comments in the generated code are useful if you're trying to debug the
  compiler, and perhaps also if you are trying to debug your Snowball code, but
  for everyone else they just bloat the code which as the number of languages
  we support grows becomes more of an issue.

* `-parentclassname` is not only for java and csharp so don't disable it if
  those backends are disabled.

* `-syntax` now reports the value for each numeric literal.

* Report location for excessive get nesting error.

* Internally the compiler now represents negated literal numbers as a simple
  `c_number` rather than `c_neg` applied to a `c_number` with a positive value.
  This simplifies optimisations that want to check for a constant numeric
  expression.

Build system
------------

* Link binaries with LDFLAGS if it's set, which is needed for some platform
  (e.g. OpenEmbedded).  Patch from Andreas Müller (#120).

* Add missing dependencies of algorithms.go rule.

Testsuite
---------

* C: Add stemtest for low-level regression tests.

Documentation
-------------

* Document a C99 compiler as a requirement for building the snowball compiler
  (but the C code it generates should still work with any ISO C compiler).

  A few declarations mixed with code crept in some time ago (which nobody's
  complained about), so this is really just formally documenting a requirement
  which already existed.

* README: Explain what Snowball is and what Stemming is (#131, reported by Sean
  Kelly).

* CONTRIBUTING.rst: Expand section on adding a new generator.

* For Python snowballstemmer module include global NEWS instead of
  Python-specific CHANGES.rst and use README.rst as the long description.
  Patch from Dmitry Shachnev (#119).

* COPYING: Update and incorporate Python backend licensing information which
  was previously in a separate file.

Snowball 2.0.0 (2019-10-02)
===========================

C/C++
-----

* Fully handle 4-byte UTF-8 sequences.  Previously `hop` and `next` handled
  sequences of any length, but commands which look at the character value only
  handled sequences up to length 3.  Fixes #89.

* Fix handling of a 3-byte UTF-8 sequence in a grouping in `backwardmode`.

Java
----

* TestApp.java:

  - Always use UTF-8 for I/O.  Patch from David Corbett (#80).

  - Allow reading input from stdin.

  - Remove rather pointless "stem n times" feature.

  - Only lower case ASCII to match stemwords.c.

  - Stem empty lines too to match stemwords.c.

Code Quality Improvements
-------------------------

* Fix various warnings from newer compilers.

* Improve use of `const`.

* Share common functions between compiler backends rather than having multiple
  copies of the same code.

* Assorted code clean-up.

* Initialise line_labelled member of struct generator to 0.  Previously we were
  invoking undefined behaviour, though in practice it'll be zero initialised on
  most platforms.

New Code Generators
-------------------

* Add Python generator (#24).  Originally written by Yoshiki Shibukawa, with
  additional updates by Dmitry Shachnev.

* Add Javascript generator.  Based on JSX generator (#26) written by Yoshiki
  Shibukawa.

* Add Rust generator from Jakob Demler (#51).

* Add Go generator from Marty Schoch (#57).

* Add C# generator.  Based on patch from Cesar Souza (#16, #17).

* Add Pascal generator.  Based on Delphi backend from stemming.zip file on old
  website (#75).

New Snowball Language Features
------------------------------

* Add `len` and `lenof` to measure Unicode length.  These are similar to `size`
  and `sizeof` (respectively), but `size` and `sizeof` return the length in
  bytes under `-utf8`, whereas these new commands give the same result whether
  using `-utf8`, `-widechars` or neither (but under `-utf8` they are O(n) in
  the length of the string).  For compatibility with existing code which might
  use these as variable or function names, they stop being treated as tokens if
  declared to be a variable or function.

* New `{U+1234}` stringdef notation for Unicode codepoints.

* More versatile integer tests.  Now you can compare any two arithmetic
  expressions with a relational operator in parentheses after the `$`, so for
  example `$(len > 3)` can now be used when previously a temporary variable was
  required: `$tmp = len $tmp > 3`

Code generation improvements
----------------------------

* General:

  + Avoid unnecessarily saving and restoring of the cursor for more commands -
    `atlimit`, `do`, `set` and `unset` all leave the cursor alone or always
    restore its value, and for C `booltest` (which other languages already
    handled).

  + Special case handling for `setlimit tomark AE`.  All uses of setlimit in
    the current stemmers we ship follow this pattern, and by special-casing we
    can avoid having to save and restore the cursor (#74).

  + Merge duplicate actions in the same `among`.  This reduces the size of the
    switch/if-chain in the generated code which dispatch the among for many of
    the stemmers.

  + Generate simpler code for `among`.  We always check for a zero return value
    when we call the among, so there's no point also checking for that in the
    switch/if-chain.  We can also avoid the switch/if-chain entirely when
    there's only one possible outcome (besides the zero return).

  + Optimise code generated for `do <function call>`.  This speeds up "make
    check_python" by about 2%, and should speed up other interpreted languages
    too (#110).

  + Generate more and better comments referencing snowball source.

  + Add homepage URL and compiler version as comments in generated files.

* C/C++:

  + Fix `size` and `sizeof` to not report one too high (reported by Assem
    Chelli in #32).

  + If signal `f` from a function call would lead to return from the current
    function then handle this and bailing out on an error together with a
    simple `if (ret <= 0) return ret;`

  + Inline testing for a single character literals.

  + Avoiding generating `|| 0` in corner case - this can result in a compiler
    warning when building the generated code.

  + Implement `insert_v()` in terms of `insert_s()`.

  + Add conditional `extern "C"` so `runtime/api.h` can be included from C++
    code.  Closes #90, reported by vvarma.

* Java:

  + Fix functions in `among` to work in Java.  We seem to need to make the
    methods called from among `public` instead of `private`, and to call them
    on `this` instead of the `methodObject` (which is cleaner anyway).  No
    revision in version control seems to generate working code for this case,
    but Richard says it definitely used to work - possibly older JVMs failed to
    correctly enforce the access controls when methods were invoked by
    reflection.

  + Code after handling `f` by returning from the current function is
    unreachable too.

  + Previously we incorrectly decided that code after an `or` was
    unreachable in certain cases.  None of the current stemmers in the
    distribution triggered this, but Martin Porter's snowball version
    of the Schinke Latin stemmer does.  Fixes #58, reported by Alexander
    Myltsev.

  + The reachability logic was failing to consider reachability from
    the final command in an `or`.  Fixes #82, reported by David Corbett.

  + Fix `maxint` and `minint`.  Patch from David Corbett in #31.

  + Fix `$` on strings.  The previous generated code was just wrong.  This
    doesn't affect any of the included algorithms, but for example breaks
    Martin Porter's snowball implementation of Schinke's Latin Stemmer.
    Issue noted by Jakob Demler while working on the Rust backend in #51,
    and reported in the Schinke's Latin Stemmer by Alexander Myltsev
    in #58.

  + Make SnowballProgram objects serializable.  Patch from Oleg Smirnov in #43.

  + Eliminate range-check implementation for groupings.  This was removed from
    the C generator 10 years earlier, isn't used for any of the existing
    algorithms, and it doesn't seem likely it would be - the grouping would
    have to consist entirely of a contiguous block of Unicode code-points.

  + Simplify code generated for `repeat` and `atleast`.

  + Eliminate unused return values and variables from runtime functions.

  + Only import the `among` and `SnowballProgram` classes if they're actually
    used.

  + Only generate `copy_from()` method if it's used.

  + Merge runtime functions `eq_s` and `eq_v` functions.

  + Java arrays know their own length so stop storing it separately.

  + Escape char 127 (DEL) in generated Java code.  It's unlikely that this
    character would actually be used in a real stemmer, so this was more of a
    theoretical bug.

  + Drop unused import of InvocationTargetException from SnowballStemmer.
    Reported by GerritDeMeulder in #72.

  + Fix lint check issues in generated Java code.  The stemmer classes are only
    referenced in the example app via reflection, so add
    @SuppressWarnings("unused") for them.  The stemmer classes override
    equals() and hashCode() methods from the standard java Object class, so
    mark these with @Override.  Both suggested by GerritDeMeulder in #72.

  + Declare Java variables at point of use in generated code.  Putting all
    declarations at the top of the function was adding unnecessary complexity
    to the Java generator code for no benefit.

  + Improve formatting of generated code.

New stemming algorithms
-----------------------

* Add Tamil stemmer from Damodharan Rajalingam (#2, #3).

* Add Arabic stemmer from Assem Chelli (#32, #50).

* Add Irish stemmer from Jim O'Regan (#48).

* Add Nepali stemmer from Arthur Zakirov (#70).

* Add Indonesian stemmer from Olly Betts (#71).

* Add Hindi stemmer from Olly Betts (#73). Thanks to David Corbett for review.

* Add Lithuanian stemmer from Dainius Jocas (#22, #76).

* Add Greek stemmer from Oleg Smirnov (#44).

* Add Catalan and Basque stemmers from Israel Olalla (#104).

Behavioural changes to existing algorithms
------------------------------------------

* Portuguese:

  + Replace incorrect Spanish suffixes by Portuguese suffixes (#1).

* French:

  + The MSDOS CP850 version of the French algorithm was missing changes present
    in the ISO8859-1 and Unicode versions.  There's now a single version of
    each algorithm which was based on the Unicode version.

  + Recognize French suffixes even when they begin with diaereses.  Patch from
    David Corbett in #78.

* Russian:

  + We now normalise 'ё' to 'е' before stemming.  The documentation has long
    said "we assume ['ё'] is mapped into ['е']" but it's more convenient for
    the stemmer to actually perform this normalisation.  This change has no
    effect if the caller is already normalising as we recommend.  It's a change
    in behaviour they aren't, but 'ё' occurs rarely (there are currently no
    instances in our test vocabulary) and this improves behaviour when it does
    occur.  Patch from Eugene Mirotin (#65, #68).

* Finish:

  + Adjust the Finnish algorithm not to mangle numbers.  This change also
    means it tends to leave foreign words alone.  Fixes #66.

* Danish:

  + Adjust Danish algorithm not to mangle alphanumeric codes. In particular
    alphanumeric codes ending in a double digit (e.g. 0x0e00, hal9000,
    space1999) are no longer mangled.  See #81.

Optimisations to existing algorithms
------------------------------------

* Turkish:

  + Simplify uses of `test` in stemmer code.

  + Check for 'ad' or 'soyad' more efficiently, and without needing the
    strlen variable.  This speeds up "make check_utf8_turkish" by 11%
    on x86 Linux.

* Kraaij-Pohlmann:

  + Eliminate variable x `$p1 <= cursor` is simpler and a little more efficient
    than `setmark x $x >= p1`.

Code clarity improvements to existing algorithms
------------------------------------------------

* Turkish:

  + Use , for cedilla to match the conventions used in other stemmers.

* Kraaij-Pohlmann:

  + Avoid cryptic `[among ( (])` ... `)` construct - instead use the same
    `[substring] among (` ... `)` construct we do in other stemmers.

Compiler
--------

* Support conventional --help and --version options.

* Warn if -r or -ep used with backend other than C/C++.

* Warn if encoding command line options are specified when generating code in a
  language with a fixed encoding.

* The default classname is now set based on the output filename, so `-n` is now
  often no longer needed.  Fixes #64.

* Avoid potential one byte buffer over-read when parsing snowball code.

* Avoid comparing with uninitialised array element during compilation.

* Improve `-syntax` output for `setlimit L for C`.

* Optimise away double negation so generators don't have to worry about
  generating `--` (decrement operator in many languages).  Fixes #52, reported
  by David Corbett.

* Improved compiler error and warning messages:

  - We now report FILE:LINE: before each diagnostic message.

  - Improve warnings for unused declarations/definitions.

  - Warn for variables which are used, but either never initialised
    or never read.

  - Flag non-ASCII literal strings.  This is an error for wide Unicode, but
    only a warning for single-byte and UTF-8 which work so long as the source
    encoding matches the encoding used in the generated stemmer code.

  - Improve error recovery after an undeclared `define`.  We now sniff the
    token after the identifier and if it is `as` we parse as a routine,
    otherwise we parse as a grouping.  Previously we always just assumed it was
    a routine, which gave a confusing second error if it was a grouping.

  - Improve error recovery after an unexpected token in `among`.  Previously
    we acted as if the unexpected token closed the `among` (this probably
    wasn't intended but just a missing `break;` in a switch statement).  Now we
    issue an error and try the next token.

* Report error instead of silently truncating character values (e.g. `hex 123`
  previously silently became byte 0x23 which is `#` rather than a
  g-with-cedilla).

* Enlarge the initial input buffer size to 8192 bytes and double each time we
  hit the end.  Snowball programs are typically a few KB in size (with the
  current largest we ship being the Greek stemmer at 27KB) so the previous
  approach of starting with a 10 byte input buffer and increasing its size by
  50% plus 40 bytes each time it filled was inefficient, needing up to 15
  reallocations to load greek.sbl.

* Identify variables only used by one `routine`/`external`.  This information
  isn't yet used, but such variables which are also always written to before
  being read can be emitted as local variables in most target languages.

* We now allow multiple source files on command line, and allow them to be
  after (or even interspersed) with options to better match modern Unix
  conventions.  Support for multiple source files allows specifying a single
  byte character set mapping via a source file of `stringdef`.

* Avoid infinite recursion in compiler when optimising a recursive snowball
  function.  Recursive functions aren't typical in snowball programs, but
  the compiler shouldn't crash for any input, especially not a valid one.
  We now simply limit on how deep the compiler will recurse and make the
  pessimistic assumption in the unlikely event we hit this limit.

Build system
------------

* `make clean` in C libstemmer_c distribution now removes `examples/*.o`.
  (#59)

* Fix all the places which previously had to have a list of stemmers to work
  dynamically or be generated, so now only modules.txt needs updating to add
  a new stemmer.

* Add check_java make target which runs tests for java.

* Support gzipped test data (the uncompressed arabic test data is too big for
  github).

* GNUmakefile: Drop useless `-eprefix` and `-r` options from snowball
  invocations for Java - these are only meaningful when generating C code.

* Pass CFLAGS when linking which matches convention (e.g. automake does it) and
  facilitates use of tools such as ASan.  Fixes #84, reported by Thomas
  Pointhuber.

* Add CI builds with -std=c90 to check compiler and generated code are C90
  (#54)

libstemmer
----------

* Split out CPPFLAGS from CFLAGS and use CFLAGS when linking stemwords.

* Add -O2 to CFLAGS.

* Make generated tables of encodings and modules const.

* Fix clang static analyzer memory leak warning (in practice this code path
  can never actually be taken).  Patch from Patrick O. Perry (#56)

Documentation
-------------

* Added copyright and licensing details (#10).

* Document that libstemmer supports ISO_8859_2 encoding.  Currently hungarian
  and romanian are available in ISO_8859_2.

* Remove documentation falsely claiming that libstemmer supports CP850
  encoding.

* CONTRIBUTING.rst: Add guidance for contributing new stemming algorithms and
  new language backends.

* Overhaul libstemmer_python_README.  Most notably, replace the benchmark data
  which was very out of date.
